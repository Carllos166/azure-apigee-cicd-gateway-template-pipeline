parameters:
  memory_maven: ""
  version_java: ""
  jdk_Version_Option: ""
  maven_Pom_File: ""

stages:
  # Set Deployment Target: Define Apigee organization and environment from Git Branch
  - stage: Set_environment
    displayName: "Environment"
    jobs:
      - job: Set_environment
        displayName: "Environment"
        steps:
          # Set Deployment Target: Define Apigee organization and environmnet from Git Branch
          - bash: |
              echo $COMMIT_BRANCH is committed
              if [ $COMMIT_BRANCH == "refs/heads/ci/BRANCH_NAME" ]; then
                # PROD branch --> Apigee prod environment 
                echo "##vso[task.setvariable variable=APIGEE_ORG]$DEFAULT_APIGEE_ORG"
                echo "##vso[task.setvariable variable=APIGEE_ENV]prd"
              else
                # all others branches --> default environment
                echo "##vso[task.setvariable variable=APIGEE_ORG]$DEFAULT_APIGEE_ORG"
                echo "##vso[task.setvariable variable=APIGEE_ENV]$DEFAULT_APIGEE_ENV"
              fi
            enabled: "true"
            displayName: Set Deployment Target
            env:
              DEFAULT_APIGEE_ORG: $(APIGEE_ORG)
              DEFAULT_APIGEE_ENV: $(APIGEE_ENV)
              COMMIT_BRANCH: $(COMMIT_BRANCH)

  - stage: Test_Lint
      displayName: "Test"
      jobs:
        - job: Apigeelint
          displayName: "Test"
          steps:
            # install node.js tools and dependencies.
            - task: NodeTool@0
              inputs:
                versionSpec: "12.x"
              enabled: "true"

            - task: Npm@1
              inputs:
                command: "custom"
                customCommand: "install --force-clean"
                workingDir: "."
              displayName: npmInstalls
              enabled: "true"

            # run Apigeelint, API proxy linter AND run ESlint, javascript linter AND Publish static code analysis folder results
            # # ApigeeLint HTML output
            # - bash: |
            #     echo "run Apigeelint"
            #     rm -rf code_test_output
            #     mkdir code_test_output
            #     # /azure/_work/1/s/node_modules/apigeelint
            #     ./node_modules/apigeelint/cli.js -s apiproxy/ -f html.js -w code_test_output
            #     ls code_test_output
            #   enabled: "true"
            #   displayName: runApigeeLint

            # ApigeeLint JSON output
          - bash: |
              echo "run Apigeelint"
              rm -rf code_test_output
              mkdir code_test_output
              # /azure/_work/1/s/node_modules/apigeelint
              ./node_modules/apigeelint/cli.js -s apiproxy/ -f json.js -w code_test_output
              ls code_test_output
            enabled: "true"
            displayName: runApigeeLint

        # - bash: |
        #     echo "run Eslint"
        #     ./node_modules/eslint/bin/eslint.js -c ./.eslintrc-jsc.yml --format html ./apiproxy/resources/jsc > code_test_output/eslint-out.html
        #     cat code_test_output/eslint-out.html
        #   enabled: "true"
        #   displayName: runESlint
      
  - stage: Approval
    displayName: "Approval"
    jobs:
      - job: Approval
        pool: server
        condition: eq(variables["Build.SourceBranch"], "refs/heads/ci/BRANCH_NAME")
        steps:
          - task: ManualValidation@0
            inputs:
              #You can send an email to a group using the [org name]\group name syntax.
              notifyUsers: "teste@teste.com"
              instructions: "continue?"

  - stage: Deploy
    displayName: "Deploy"
    jobs:
      - job: Deploy
        displayName: "Deploy"
        steps:
          # install node.js tools and dependencies.
          - task: NodeTool@0
            inputs:
              versionSpec: "12.x"
            enabled: "true"
          
          - task: Npm@1
            inputs:
              command: "custom"
              customCommand: "install --force-clean"
              workingDir: "."
            displayName: npmInstalls
            enabled: "true"

          # Generate a GCP Service Account bearer token using the gcloud command-line tool within an Azure Pipeline (TTL 3600s)
          - bash: |
              BEARER_TOKEN=$(gcloud auth print-access-token)
              echo "##vso[task.setvariable variable=BEARER_TOKEN;issecret=true]$BEARER_TOKEN"
            enabled: "true"
            displayName: "Set Bearer Token from GCP CLI"    

          - task: JavaToolInstaller@0
            inputs:
              versionSpec: ${{ parameters.version_java }} 
              jdkArchitectureOption: "x64"
              jdkSourceOption: "PreInstalled"
          
          # Maven Config Env
          - task: Maven@3
            displayName: mvnProcessResources
            enabled: "true"
            inputs:
              mavenPomFile: ${{ parameters.maven_Pom_File }}
              mavenOptions: ${{ parameters.memory_maven }}
              javaHomeOption: "JDKVersion"
              jdkVersionOption: ${{ parameters.jdk_Version_Option }}
              jdkArchitectureOption: "x64"
              publishJUnitResults: true
              goals: "process-resources -P$(API_VERSION) -Dcommit=$(GIT_COMMIT) -Dbranch=$(GIT_BRANCH) -Dauthor=$(AUTHOR_EMAIL) -e"
          
          # Maven Package proxy bundle
          - task: Maven@3
            displayName: mvnApigeeConfigure
            enabled: "true"
            inputs:
              mavenPomFile: ${{ parameters.maven_Pom_File }}
              mavenOptions: ${{ parameters.memory_maven }}
              javaHomeOption: "JDKVersion"
              jdkVersionOption: ${{ parameters.jdk_Version_Option }}
              jdkArchitectureOption: "x64"
              publishJUnitResults: true
              goals: "apigee-enterprise:configure -P$(API_VERSION) -Dorg=$(APIGEE_ORG) -Denv=$(APIGEE_ENV)" 
          
          # Maven Deploy proxy bundle: Apigee X/hybrid
          - task: Maven@3
            displayName: mvnApigeeDeployGoogle
            enabled: "true"
            condition: and(succeeded(), eq(variables.API_VERSION, "googleapi"))
            inputs:
              mavenPomFile: ${{ parameters.maven_Pom_File }}
              mavenOptions: ${{ parameters.memory_maven }}
              javaHomeOption: "JDKVersion"
              jdkVersionOption: ${{ parameters.jdk_Version_Option }}
              jdkArchitectureOption: "x64"
              publishJUnitResults: true
              goals: "apigee-enterprise:deploy -P$(API_VERSION) -Dtoken=$(BEARER_TOKEN) -Dapigee.org=$(APIGEE_ORG) -Denv=$(APIGEE_ENV)"
              #goals: "apigee-enterprise:deploy -P$(API_VERSION) -Dapigee.org=$(APIGEE_ORG) -Denv=$(APIGEE_ENV) -Dsa=sa.json"

            # Run Apickli, API test integration AND Publish integration test folder result
          - bash: |
              echo "Executing CURL command"
              BEARER_TOKEN=$(gcloud auth print-access-token)
              echo "##vso[task.setvariable variable=BEARER_TOKEN;issecret=true]$BEARER_TOKEN"

              echo ""
              echo ""

              API_NAME="EXAMPLE"

              LATEST_VERSION=$(curl -s "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis/$API_NAME/revisions" \
                --header "Authorization: Bearer $BEARER_TOKEN" \
                --header "Accept: application/json" | jq -r ".[-1]")

              RESPONSE=$(curl -s "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$API_NAME/revisions/$LATEST_VERSION/deployments" \
                --header "Authorization: Bearer $(BEARER_TOKEN)" \
                --header "Accept: application/json")
              echo "CURL Response: $RESPONSE"
              echo "A proxy: $API_NAME foi implantada na organização: $APIGEE_ORG e no ambiente: $APIGEE_ENV. Sua última versão implantada: $LATEST_VERSION ."

            displayName: runCURL
            enabled: true
            env:
              BEARER_TOKEN: $(BEARER_TOKEN);