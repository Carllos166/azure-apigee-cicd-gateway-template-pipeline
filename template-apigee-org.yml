parameters:
  memory_Maven: ''
  version_java: ''
  jdk_Version_Option: ''
  maven_Pom_File: ''
  maven_Pom_File_SharedFlow: ''

stages:
- stage: Set_environment
  displayName: 'Environment'
  jobs:
  - job: Set_environment
    displayName: 'Environment'
    steps:
    # Set Deployment Target: Define Apigee organization and environmnet from Git Branch
    - bash: |
        echo $COMMIT_BRANCH is committed
        if [ $COMMIT_BRANCH == "refs/heads/ci/BRANCH_NAME" ]; then
          # PROD branch --> Apigee prod environment 
          echo "##vso[task.setvariable variable=APIGEE_ORG]$DEFAULT_APIGEE_ORG"
          echo "##vso[task.setvariable variable=APIGEE_ENV]prod"
        else
          # all others branches --> default environment
          echo "##vso[task.setvariable variable=APIGEE_ORG]$DEFAULT_APIGEE_ORG"
          echo "##vso[task.setvariable variable=APIGEE_ENV]$DEFAULT_APIGEE_ENV"
        fi
      enabled: "true"
      displayName: Set Deployment Target
      env:  
        DEFAULT_APIGEE_ORG: $(APIGEE_ORG)
        DEFAULT_APIGEE_ENV: $(APIGEE_ENV)
        COMMIT_BRANCH: $(COMMIT_BRANCH)


- stage: Test_Lint
  displayName: 'Test'
  jobs:
  - job: Apigeelint
    displayName: 'Test'
    steps:
    # run Apigeelint, API proxy linter AND run ESlint, javascript linter AND Publish static code analysis folder results
    - bash: |
        echo "run Apigeelint"
        mkdir code_test_output
        # /azure/_work/1/s/node_modules/apigeelint
        ./node_modules/apigeelint/cli.js -s apiproxy/ -e PO013 -f html.js > code_test_output/apigeelint-output.html
        ls code_test_output
      enabled: "true"
      displayName: runApigeeLint
    
    - bash: |
        echo "run Eslint"
        ./node_modules/eslint/bin/eslint.js -c ./.eslintrc-jsc.yml --format html ./apiproxy/resources/jsc > code_test_output/eslint-out.html
        cat code_test_output/eslint-out.html
      enabled: "true"
      displayName: runESlint

- stage: Approval
  displayName: 'Approval'
  jobs:
  - job: Approval
    pool: server
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/ci/gcp-prd')
    steps:
    - task: ManualValidation@0
      inputs:
        #You can send an email to a group using the [org name]\group name syntax.
        notifyUsers: 'teste@teste.com'
        instructions: 'continue?'


- stage: Deploy
  displayName: 'Deploy'
  jobs:
  - job: Deploy
    displayName: 'Deploy'
    steps:
    # install node.js tools and dependencies
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      enabled: "true"
        
    - task: Npm@1
      inputs:
        command: 'install'
        workingDir: '.'
      displayName: npmInstalls
      enabled: "true"

    # Configure EdgeeConfig/edge.json file: update target environment name
    - bash: |
        sed -i "s/target_apigee_env/$(APIGEE_ENV)/g" ./EdgeConfig/edge.json
      enabled: "true"
      displayName: Update edge.json
    
    # Generate a GCP Service Account bearer token using the gcloud command-line tool within an Azure Pipeline
    - bash: |
        BEARER_TOKEN=$(gcloud auth print-access-token)
        echo "##vso[task.setvariable variable=BEARER_TOKEN;issecret=true]$BEARER_TOKEN"
      enabled: "true"
      displayName: 'Set Bearer Token from GCP CLI'
    
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '8' 
        jdkArchitectureOption:  'x64' 
        jdkSourceOption: 'PreInstalled'
    
    # # Maven Deploy SharedFlow Configuration
    - task: Maven@3
      displayName: mvnSharedFlowConfiguration
      enabled: "true"
      inputs:
        mavenPomFile: ${{ parameters.maven_Pom_File_SharedFlow }}
        mavenOptions: ${{ parameters.memory_Maven }}
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: ${{ parameters.jdk_Version_Option }}
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        goals: "install -P$(API_VERSION) -Dapigee.org=$(APIGEE_ORG) -Denv=$(APIGEE_ENV) -Dtoken=$(BEARER_TOKEN)"
        
    # Maven Package SharedFlow bundle
    - task: Maven@3
      displayName: mvnSharedFlowConfigure
      enabled: "true"
      inputs:
        mavenPomFile: ${{ parameters.maven_Pom_File_SharedFlow }}
        mavenOptions: ${{ parameters.memory_Maven }}
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: ${{ parameters.jdk_Version_Option }}
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        goals: "apigee-enterprise:configure -P$(API_VERSION) -Dorg=$(APIGEE_ORG) -Denv=$(APIGEE_ENV) -Dtoken=$(BEARER_TOKEN)"
    

    # Maven Deploy SharedFlow bundlemvnSharedFlowConfiguration
    - task: Maven@3
      displayName: mvnSharedFlowDeploy
      enabled: "true"
      inputs:
        mavenPomFile: ${{ parameters.maven_Pom_File_SharedFlow }}
        mavenOptions: ${{ parameters.memory_Maven }}
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: ${{ parameters.jdk_Version_Option }}
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        goals: "apigee-enterprise:deploy -P$(API_VERSION) -Dtoken=$(BEARER_TOKEN) -Dapigee.org=$(APIGEE_ORG) -Denv=$(APIGEE_ENV)"
    
     # Maven Deploy Apigee Configuration (from EdgeeConfig/edge.json): Apigee X/hybrid
    - task: Maven@3
      displayName: mvnApigeeConfigurationGoogle
      enabled: "true"
      condition:  and(succeeded(), eq(variables.API_VERSION, 'googleapi'))
      inputs:
        mavenPomFile: ${{ parameters.maven_Pom_File }}
        mavenOptions: ${{ parameters.memory_Maven }}
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: ${{ parameters.jdk_Version_Option }}
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        goals: "install -P$(API_VERSION) -Dapigee.org=$(APIGEE_ORG) -Denv=$(APIGEE_ENV) -Dtoken=$(BEARER_TOKEN) -Dapigee.config.file=./EdgeConfig/edge.json -Dapigee.config.options=update"

    # # Run Apickli, API test integration AND Publish integration test folder result
    # - bash: |
    #     echo "run Apickli"
    #     mkdir integration_output
    #     export NODE_TLS_REJECT_UNAUTHORIZED="0"
    #     sed -i "s/organization_hostname/$TEST_HOST/g" ./test/integration/features/support/init.js
    #     node ./node_modules/cucumber/bin/cucumber-js ./test/integration --format json:report.json
    #     node ./test/integration/index.js
    #     cp ./cucumber_report.html integration_output/apickli_report.html 
    #   displayName: runApickli
    #   enabled: true
      
    # # Publish integration test folder result
    # - task: PublishBuildArtifacts@1
    #   displayName: publishIntegrationTestsResults
    #   enabled: true
    #   inputs:
    #     pathToPublish: integration_output
    #     artifactName: integration-tests